package roomease.rents;

import database.EmployeeLogs;
import database.RentalDAO;
import javax.swing.JOptionPane;
import util.WindowCloseHandler;
import java.sql.*;
import java.time.LocalDate;
import java.time.ZoneId;
import java.time.temporal.ChronoUnit;
import java.util.logging.Level;
import java.util.logging.Logger;
import util.EmployeeActionLog;
import util.Rental;
import util.Session;

/**
 * The EditRental class represent a JFrame the displays field and buttons
 * editing Rental
 */
public class EditRental extends javax.swing.JFrame {

    private final Rental rental;
    //Make 2 local date variables to store the check in and check out dates
    private final Date checkOutDateSQL;
    private final Date checkInDateSQL;

    /**
     * Creates new form EditRental
     *
     * @param rental
     */
    public EditRental(Rental rental) {
        this.rental = rental;
        LocalDate checkInDate;
        LocalDate checkOutDate;
        checkInDate = rental.getCheck_in_date();
        checkOutDate = rental.getCheck_in_date();
        initComponents();
        WindowCloseHandler.addWindowClosingListener(this);

        checkInDateSQL = Date.valueOf(checkInDate);
        checkOutDateSQL = Date.valueOf(checkOutDate);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        jPanel2 = new javax.swing.JPanel();
        submit = new javax.swing.JButton();
        priceLabel = new javax.swing.JLabel();
        backButton = new javax.swing.JButton();
        jLabel3 = new javax.swing.JLabel();
        jLabel5 = new javax.swing.JLabel();
        CheckInDate = new com.toedter.calendar.JDateChooser();
        CheckOutDate = new com.toedter.calendar.JDateChooser();
        amountField = new javax.swing.JFormattedTextField();

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 100, Short.MAX_VALUE)
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 100, Short.MAX_VALUE)
        );

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);

        jPanel2.setBackground(new java.awt.Color(8, 99, 117));

        submit.setFont(new java.awt.Font("Roboto", 1, 14)); // NOI18N
        submit.setText("Submit");
        submit.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                submitActionPerformed(evt);
            }
        });

        priceLabel.setFont(new java.awt.Font("SansSerif", 1, 18)); // NOI18N
        priceLabel.setForeground(new java.awt.Color(247, 236, 89));
        priceLabel.setText("Amount");

        backButton.setFont(new java.awt.Font("Roboto", 1, 14)); // NOI18N
        backButton.setText("Go back");
        backButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                BackRental(evt);
            }
        });

        jLabel3.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        jLabel3.setForeground(new java.awt.Color(247, 236, 89));
        jLabel3.setText("Check In:");

        jLabel5.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        jLabel5.setForeground(new java.awt.Color(247, 236, 89));
        jLabel5.setText("Check Out:");

        CheckInDate.setDateFormatString("yyyy-MM-dd");

        CheckOutDate.setDateFormatString("yyyy-MM-dd");

        amountField.setFormatterFactory(new javax.swing.text.DefaultFormatterFactory(new javax.swing.text.NumberFormatter(new java.text.DecimalFormat("#0.00"))));

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addGap(49, 49, 49)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jLabel5)
                    .addComponent(jLabel3)
                    .addComponent(priceLabel))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(CheckInDate, javax.swing.GroupLayout.DEFAULT_SIZE, 150, Short.MAX_VALUE)
                    .addComponent(CheckOutDate, javax.swing.GroupLayout.DEFAULT_SIZE, 157, Short.MAX_VALUE)
                    .addComponent(amountField))
                .addGap(108, 108, 108))
            .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(jPanel2Layout.createSequentialGroup()
                    .addContainerGap()
                    .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addGroup(jPanel2Layout.createSequentialGroup()
                            .addGap(130, 130, 130)
                            .addComponent(submit))
                        .addComponent(backButton))
                    .addContainerGap(177, Short.MAX_VALUE)))
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addGap(39, 39, 39)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(priceLabel)
                    .addComponent(amountField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel3)
                    .addComponent(CheckInDate, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(CheckOutDate, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel5))
                .addContainerGap(97, Short.MAX_VALUE))
            .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(jPanel2Layout.createSequentialGroup()
                    .addContainerGap()
                    .addComponent(backButton)
                    .addGap(150, 150, 150)
                    .addComponent(submit)
                    .addContainerGap(26, Short.MAX_VALUE)))
        );

        CheckInDate.setDate(Date.from(rental.getCheck_in_date().atStartOfDay(ZoneId.systemDefault()).toInstant()));
        CheckOutDate.setDate(Date.from(rental.getCheck_out_date().atStartOfDay(ZoneId.systemDefault()).toInstant()));
        amountField.setValue(rental.getTotal_amount());

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );

        pack();
        setLocationRelativeTo(null);
    }// </editor-fold>//GEN-END:initComponents
/**
     * Checks the entered values and inserts changes into DB
     */
    private void submitActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_submitActionPerformed

        //Get the check in and check out dates
        
        java.util.Date checkInDate = CheckInDate.getDate();
        java.util.Date checkOutDate = CheckOutDate.getDate();

        LocalDate checkInLocalDate = checkInDate.toInstant().atZone(ZoneId.systemDefault()).toLocalDate();
        LocalDate checkOutLocalDate = checkOutDate.toInstant().atZone(ZoneId.systemDefault()).toLocalDate();
        LocalDate currDate = LocalDate.now();

        //Get the Amount
        double amount = Double.parseDouble(amountField.getText());

        //Verify that the check in date is not before the current date
        if (checkInDate.before(Date.valueOf(currDate))) {
            JOptionPane.showMessageDialog(null, "Check In Date cannot be before the current date");
            return;
        }

        //Verify that the check out date is not before the check in date
        if (checkOutDate.before(checkInDate)) {
            JOptionPane.showMessageDialog(null, "Check Out Date cannot be before the Check In Date");
            return;
        }

        //Verify that the amount is not negative
        if (amount < 0) {
            JOptionPane.showMessageDialog(null, "Amount cannot be negative");
            return;
        }

        //Verify that the amount is not zero  
        if (amount == 0) {
            JOptionPane.showMessageDialog(null, "Amount cannot be zero");
            return;
        }

        try {
            //Check RentalDAO.check_outcheck()
            if (RentalDAO.check_outCheck(checkOutLocalDate, rental.getRental_id())) {
                JOptionPane.showMessageDialog(null, "Room is already booked for the Check Out Date");
                //Set the check out date to the CheckOutDateSQL
                CheckOutDate.setDate(checkOutDateSQL);
                return;
            }
        } catch (SQLException ex) {
            Logger.getLogger(EditRental.class.getName()).log(Level.SEVERE, null, ex);
        }

        try {
            if (RentalDAO.check_inCheck(checkInLocalDate, rental.getRental_id())) {
                JOptionPane.showMessageDialog(null, "Room is already booked for the Check In Date");
                //Set the check in date to the CheckInDateSQL
                CheckInDate.setDate(checkInDateSQL);
                return;
            }
        } catch (SQLException ex) {
            Logger.getLogger(EditRental.class.getName()).log(Level.SEVERE, null, ex);
        }

        //Update the rental
        rental.setCheck_in_date(checkInLocalDate);
        rental.setCheck_out_date(checkOutLocalDate);
        //Check if user forgot has the same amount to the rental amount
        if (amount != rental.getTotal_amount()) {
            //If not, update the amount
            rental.setTotal_amount(amount);
        }else{
            //If yes, calculate the amount
            //calculate the days of the rental
            long days = ChronoUnit.DAYS.between(checkInLocalDate, checkOutLocalDate);
            int daysInt = Math.toIntExact(days);

            System.out.println("Number of days: " + daysInt);
            
            //calculate the total price of the rental
            double totalPrice = days * rental.getRoom().getPrice();
        }
       

        try {
            //Update the rental in the database
            if (RentalDAO.updateRental(rental)) {
                JOptionPane.showMessageDialog(null, "Rental Updated Successfully");
                EmployeeActionLog empLog = new EmployeeActionLog(Session.getCurrentUserId(), "Updated Rental " + rental.getRental_id());
                EmployeeLogs.createEmployeeActionLog(empLog);
                dispose();
                new RentalsPage().setVisible(true);
            } else {
                JOptionPane.showMessageDialog(null, "Error Updating Rental");
            }
        } catch (SQLException ex) {
            Logger.getLogger(EditRental.class.getName()).log(Level.SEVERE, null, ex);
        }


    }//GEN-LAST:event_submitActionPerformed

    /**
     * Disposes current frame and creates new RentalsPage
     */
    private void BackRental(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_BackRental
        dispose();
        new RentalsPage().setVisible(true);
    }//GEN-LAST:event_BackRental


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private com.toedter.calendar.JDateChooser CheckInDate;
    private com.toedter.calendar.JDateChooser CheckOutDate;
    private javax.swing.JFormattedTextField amountField;
    private javax.swing.JButton backButton;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JLabel priceLabel;
    private javax.swing.JButton submit;
    // End of variables declaration//GEN-END:variables
}
